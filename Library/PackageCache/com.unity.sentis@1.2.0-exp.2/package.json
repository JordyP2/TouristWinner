{
  "name": "com.unity.sentis",
  "displayName": "Sentis",
  "version": "1.2.0-exp.2",
  "unity": "2021.3",
  "description": "The Sentis package is a neural network inference library for Unity. You can use Sentis to import trained neural network models into Unity, then run them in real time locally on any platform Unity supports and in the Editor. You can run models on the GPU or the CPU.\n\nYou can use Sentis to run models that do style transfer, generate assets, automate non-player character (NPC) logic, and much more\n\nVisit https://discussions.unity.com/c/10 for updates and resources on the Sentis beta, including a full sample project.",
  "dependencies": {
    "com.unity.burst": "1.8.4",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0"
  },
  "_upm": {
    "changelog": "### Added\n- Fast inference path for 1D Resize\n- OneHot operator now supports float tensors properly\n- Import for LayerNormalization operator\n- Import for Gelu operator\n- Optimized ScalarMad layer with optimizer passes\n\n### Removed\n- Watermark on Unity scenes referencing Sentis\n- License key requirement for Sentis\n\n### Changed\n- Moved CPU fallback pass to mandatory optimizer passes and remove MakeReadable calls in layer inference\n- Binary search for allocator speedup\n- Cached compute func instances for inference speedup\n- Refactored AxisNormalization to be LayerNormalization\n\n### Fixed\n- Import settings for Upsample operator\n- Condition for fast inference path for 2D Resize on CPU\n- Inspector no longer crashes when model can't be imported\n- Serialize to streaming assets now correctly uses optimal path and doesn't crash the editor with large models\n- Serialize to streaming assets creates directory if it doesn't exist and refreshes asset database"
  },
  "upmCi": {
    "footprint": "c2e02c97cf47bb362ddb0fc4ade5c964ae58e17d"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.sentis@1.2/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/UnityInferenceEngine.git",
    "type": "git",
    "revision": "03a4bb1ba45958aea199062458cacd5b9796e6f4"
  },
  "samples": [
    {
      "displayName": "Add a custom layer",
      "description": "An example of adding a custom layer to implement a custom ONNX operator.",
      "path": "Samples~/Add a custom layer"
    },
    {
      "displayName": "Check the metadata of a model",
      "description": "An example of checking the metadata of a model.",
      "path": "Samples~/Check the metadata of a model"
    },
    {
      "displayName": "Convert tensors to textures",
      "description": "Examples of converting tensors to textures.",
      "path": "Samples~/Convert tensors to textures"
    },
    {
      "displayName": "Convert textures to tensors",
      "description": "Examples of converting textures to textures.",
      "path": "Samples~/Convert textures to tensors"
    },
    {
      "displayName": "Copy a texture tensor to the screen",
      "description": "An example of using TextureConverter.RenderToScreen to copy a texture tensor to the screen.",
      "path": "Samples~/Copy a texture tensor to the screen"
    },
    {
      "displayName": "Do an operation on a tensor",
      "description": "An example of using Ops to do an operation on a tensor.",
      "path": "Samples~/Do an operation on a tensor"
    },
    {
      "displayName": "Read output asynchronously",
      "description": "Examples of reading the output from a model asynchronously, using compute shaders or Burst.",
      "path": "Samples~/Read output asynchronously"
    },
    {
      "displayName": "Run a model",
      "description": "Examples of running models with different numbers of inputs and outputs.",
      "path": "Samples~/Run a model"
    },
    {
      "displayName": "Run a model a layer at a time",
      "description": "An example of using StartManualSchedule to run a model a layer a time.",
      "path": "Samples~/Run a model a layer at a time"
    },
    {
      "displayName": "Use Burst to write data",
      "description": "An example of using Burst to write data to a tensor in the Job system.",
      "path": "Samples~/Use Burst to write data"
    },
    {
      "displayName": "Use a compute buffer",
      "description": "An example of using a compute shader to write data to a tensor on the GPU.",
      "path": "Samples~/Use a compute buffer"
    },
    {
      "displayName": "Use tensor indexing methods",
      "description": "Examples of using tensor indexing methods to get and set tensor values.",
      "path": "Samples~/Use tensor indexing methods"
    }
  ]
}
